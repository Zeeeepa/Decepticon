# 기존 cli.py의 execute_workflow 메서드를 객체지향으로 개선한 버전\n\nfrom src.utils.message import MessageProcessor, RichMessageDisplay\n\nclass DecepticonCLI:\n    def __init__(self):\n        # ... 기존 초기화 코드 ...\n        \n        # 새로운 객체지향 메시지 처리 시스템\n        self.message_processor = MessageProcessor()\n        self.message_display = RichMessageDisplay(self.console)\n    \n    async def execute_workflow_v2(self, user_input: str):\n        \"\"\"개선된 워크플로우 실행 - 객체지향 방식\"\"\"\n        if not self.swarm:\n            error_panel = Panel(\n                \"[bold red]❌ Swarm not initialized[/bold red]\",\n                box=box.ROUNDED, border_style=\"red\"\n            )\n            self.console.print(error_panel)\n            return False\n        \n        # 중복 체크 초기화\n        self.message_processor.reset_duplicate_check()\n        \n        # 로깅\n        self.logger.log_user_input(user_input)\n        \n        # 사용자 메시지 표시\n        self.message_display.display_user_message(user_input)\n        \n        inputs = {\"messages\": [HumanMessage(content=user_input)]}\n        \n        with Progress(\n            SpinnerColumn(),\n            TextColumn(\"[progress.description]{task.description}\"),\n            console=self.console,\n            transient=True\n        ) as progress:\n            main_task = progress.add_task(\"[bold green]🤖 Working...\", total=None)\n            \n            try:\n                async for namespace, output in self.swarm.astream(\n                    inputs, stream_mode=\"updates\", config=self.config, subgraphs=True\n                ):\n                    for node, value in output.items():\n                        agent_name = get_agent_name(namespace)\n                        \n                        if \"messages\" in value and value[\"messages\"]:\n                            latest_message = value[\"messages\"][-1]\n                            \n                            # 🎯 핵심: 복잡한 메시지 처리를 한 줄로!\n                            processed_message = self.message_processor.process_langchain_message(\n                                latest_message, agent_name, namespace\n                            )\n                            \n                            # 중복 체크\n                            if not self.message_processor.is_duplicate_message(processed_message):\n                                progress.stop()\n                                \n                                # 🎨 메시지 표시도 간단하게!\n                                if processed_message.type == \"ai\":\n                                    self.message_display.display_agent_message(\n                                        processed_message.agent_name,\n                                        processed_message.content,\n                                        processed_message.tool_calls\n                                    )\n                                    \n                                    # 로깅\n                                    self.logger.log_agent_response(\n                                        agent_name=processed_message.agent_name,\n                                        content=processed_message.content,\n                                        tool_calls=processed_message.tool_calls\n                                    )\n                                \n                                elif processed_message.type == \"tool\":\n                                    self.message_display.display_tool_message(\n                                        processed_message.tool_name,\n                                        processed_message.content\n                                    )\n                                    \n                                    # 로깅\n                                    self.logger.log_tool_output(\n                                        tool_name=processed_message.tool_name,\n                                        output=processed_message.content\n                                    )\n                                \n                                progress.start()\n                                progress.update(main_task, description=\"[bold blue]🤖 Working...[/bold blue]\")\n                \n                progress.update(main_task, description=\"[bold green]✅ Workflow completed!\")\n                time.sleep(1)\n                progress.stop()\n                \n                return True\n                \n            except Exception as e:\n                progress.update(main_task, description=f\"[bold red]❌ Error: {str(e)}\")\n                progress.stop()\n                return False\n\n\"\"\"\n🎯 주요 개선사항:\n\n1. 코드 길이: 200+ 줄 → 80줄 (60% 단축)\n2. 복잡성: 높음 → 낮음\n3. 재사용성: 낮음 → 높음 (app.py와 공통 사용)\n4. 유지보수성: 어려움 → 쉬움\n5. 테스트 용이성: 어려움 → 쉬움\n\n기존 코드에서 제거된 부분들:\n- extract_message_content() 직접 호출\n- extract_tool_calls() 직접 호출  \n- is_raw_tool_call_content() 함수\n- Rich Panel 수동 생성\n- 복잡한 content/tool_calls 분기 처리\n- 마크업 안전 처리 수동 구현\n\n모든 것이 MessageProcessor와 RichMessageDisplay로 캡슐화됨!\n\"\"\"\n