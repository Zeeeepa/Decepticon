# cli.py에서 새로운 객체지향 구조 활용 예시\n\nfrom src.utils.message import MessageProcessor, RichMessageDisplay\n\nclass DecepticonCLI:\n    def __init__(self):\n        self.console = Console()\n        \n        # 통합 메시지 처리기 초기화\n        self.message_processor = MessageProcessor()\n        \n        # Rich Console 메시지 표시기 초기화\n        self.message_display = RichMessageDisplay(self.console)\n    \n    async def execute_workflow(self, user_input: str):\n        \"\"\"워크플로우 실행 - 객체지향 방식\"\"\"\n        \n        # 중복 체크 초기화 (새 워크플로우 시작)\n        self.message_processor.reset_duplicate_check()\n        \n        # 사용자 메시지 표시\n        self.message_display.display_user_message(user_input)\n        \n        inputs = {\"messages\": [HumanMessage(content=user_input)]}\n        \n        async for namespace, output in self.swarm.astream(\n            inputs, stream_mode=\"updates\", config=self.config, subgraphs=True\n        ):\n            for node, value in output.items():\n                agent_name = get_agent_name(namespace)\n                \n                if \"messages\" in value and value[\"messages\"]:\n                    latest_message = value[\"messages\"][-1]\n                    \n                    # LangChain 메시지를 ProcessedMessage로 변환\n                    processed_message = self.message_processor.process_langchain_message(\n                        latest_message, agent_name, namespace\n                    )\n                    \n                    # 중복 메시지 체크\n                    if not self.message_processor.is_duplicate_message(processed_message):\n                        # 메시지 타입에 따라 적절한 표시\n                        if processed_message.type == \"ai\":\n                            self.message_display.display_agent_message(\n                                processed_message.agent_name,\n                                processed_message.content,\n                                processed_message.tool_calls\n                            )\n                        elif processed_message.type == \"tool\":\n                            self.message_display.display_tool_message(\n                                processed_message.tool_name,\n                                processed_message.content\n                            )\n                        \n                        # 로깅\n                        if processed_message.type == \"ai\":\n                            self.logger.log_agent_response(\n                                agent_name=processed_message.agent_name,\n                                content=processed_message.content,\n                                tool_calls=processed_message.tool_calls\n                            )\n                        elif processed_message.type == \"tool\":\n                            self.logger.log_tool_output(\n                                tool_name=processed_message.tool_name,\n                                output=processed_message.content\n                            )\n\n# 기존의 복잡한 메시지 처리 로직 대체:\n# - extract_message_content()\n# - extract_tool_calls()\n# - is_raw_tool_call_content()\n# - Rich Panel 수동 생성\n# ↓\n# 간단한 객체지향 방식으로 대체\n